<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Chess</title>
        <link rel="icon" href="/public/favicon.ico" sizes="32x32" type="image/x-icon">
        <style>
            .black {
                background-color: gray;
            }
            .white {
                background-color: white;
            }
            .chessboard {
                border: 2px solid black;
                display: grid;
                grid-template-columns: repeat(8, 50px);
                grid-template-rows: repeat(8, 50px);
                width: 400px;
                height: 400px;
            }
            .holding {
                cursor: grabbing;
                background-color: yellow;
            }
            .tile {
                align-items: center;
                color: black;
                display: flex;
                font-size: 2.5rem;
                justify-content: center;
                width: 50px;
                height: 50px;
            }
            #turn-indicator, #check-indicator {
                font-size: 1.5rem;
                margin-bottom: 10px;
            }
        </style>
    </head>
    <body>
        <h1>Chess</h1>
        <div id="turn-indicator">Turn: <%= game['color'] %></div>
        <% let indicator = ""; %>
        <% if (game['checkmate']) { %>
            <% indicator = "checkmate"; %>
        <% } else if (game['check']) { %>
            <% indicator = "check"; %>
        <% } %>
        <div id="check-indicator"><%= indicator %></div>
        <div class="chessboard" id="chessboard">
            <% game['board'].forEach((row, rowIndex) => { %>
                <% row.forEach((piece, colIndex) => { %>
                    <div class="tile <%= (rowIndex + colIndex) % 2 === 0 ? 'white' : 'black' %>" 
                         data-row="<%= rowIndex %>" data-col="<%= colIndex %>">
                        <%= piece %>
                    </div>
                <% }) %>
            <% }) %>
        </div>
        <script>
            let holdingPiece = null;
    
            document.addEventListener('DOMContentLoaded', () => {
                const chessboard = document.getElementById('chessboard');
                let move;
    
                // Event listeners for each tile
                chessboard.addEventListener('click', (event) => {
                    const tile = event.target.closest('.tile');
    
                    if (!tile) return;
    
                    if (!holdingPiece && tile.textContent.trim()) {
                        // Start holding a piece
                        holdingPiece = tile.textContent;
                        tile.textContent = '';
                        tile.classList.add('holding');
                        move = {
                            piece: holdingPiece.trim(),
                            from: {
                                row: tile.getAttribute('data-row'), col: tile.getAttribute('data-col')
                            }
                        };
                    }
                    
                    else if (holdingPiece) {
                        // Drop the piece into the clicked tile
                        tile.textContent = holdingPiece;
                        holdingPiece = null;
                        document.querySelectorAll('.tile').forEach(t => t.classList.remove('holding'));
                        move.to = {
                            row: tile.getAttribute('data-row'), col: tile.getAttribute('data-col')
                        };

                        // Debug
                        console.log(JSON.stringify(move));

                        // Send move to server
                        const url = `/move?fromRow=${move.from.row}&fromCol=${move.from.col}&toRow=${move.to.row}&toCol=${move.to.col}`;
                        fetch(url);
                    }
                });
            });

            const socket = new WebSocket('ws://localhost:8080');

            // Log connection
            socket.addEventListener('open', () => {
                console.log('WebSocket connection established');
            });

            // Listen for messages from the server
            socket.addEventListener('message', (event) => {
                console.log('Message received from server:', event.data);

                if (event.data === 'refresh') {
                    // Refresh the entire page
                    location.reload();
                }
            });

            // Handle connection errors
            socket.addEventListener('error', (error) => {
                console.error('WebSocket error:', error);
            });

            // Handle connection closure
            socket.addEventListener('close', () => {
                console.log('WebSocket connection closed');
            });
        </script>
    </body>
</html>
